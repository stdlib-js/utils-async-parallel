{"version":3,"file":"index.mjs","sources":["../lib/limit.js","../lib/factory.js","../lib/validate.js","../lib/main.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar logger = require( 'debug' );\n\n\n// VARIABLES //\n\nvar debug = logger( 'parallel-async:limit' );\n\n\n// MAIN //\n\n/**\n* Invokes functions in a provided array, limiting the number of concurrently pending functions.\n*\n* @private\n* @param {FunctionArray} fcns - array of functions\n* @param {Options} opts - function options\n* @param {*} [opts.thisArg] - execution context\n* @param {PositiveInteger} [opts.limit] - maximum number of pending function invocations\n* @param {Callback} done - function to invoke upon completion or upon encountering an error\n* @returns {void}\n*/\nfunction limit( fcns, opts, done ) {\n\tvar maxIndex;\n\tvar count;\n\tvar flg;\n\tvar lim;\n\tvar len;\n\tvar idx;\n\tvar out;\n\tvar i;\n\n\tlen = fcns.length;\n\tdebug( 'Number of functions: %d', len );\n\n\tout = new Array( len ); // eslint-disable-line stdlib/no-new-array\n\tif ( len < opts.limit ) {\n\t\tlim = len;\n\t} else {\n\t\tlim = opts.limit;\n\t}\n\tdebug( 'Concurrency limit: %d', lim );\n\n\tmaxIndex = len - 1;\n\tcount = 0;\n\tidx = -1;\n\tfor ( i = 0; i < lim; i++ ) {\n\t\t// This guard is necessary to protect against synchronous functions...\n\t\tif ( idx < maxIndex ) {\n\t\t\tnext(); // eslint-disable-line node/callback-return\n\t\t}\n\t}\n\t/**\n\t* Callback to invoke the next function.\n\t*\n\t* @private\n\t*/\n\tfunction next() {\n\t\tvar i;\n\n\t\tidx += 1;\n\n\t\t// Cache the current index value to allow storing results later:\n\t\ti = idx;\n\n\t\tfcns[ idx ].call( opts.thisArg, resolve );\n\n\t\t/**\n\t\t* Callback invoked once a provided function finishes.\n\t\t*\n\t\t* @private\n\t\t* @param {*} [error] - error\n\t\t* @param {*} [results] - results\n\t\t* @returns {void}\n\t\t*/\n\t\tfunction resolve( error, results ) {\n\t\t\tif ( flg ) {\n\t\t\t\t// Prevent further processing:\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif ( error ) {\n\t\t\t\tflg = true;\n\t\t\t\treturn clbk( error );\n\t\t\t}\n\t\t\tout[ i ] = results;\n\t\t\tclbk();\n\t\t}\n\t}\n\n\t/**\n\t* Callback invoked once ready to process the next function.\n\t*\n\t* @private\n\t* @param {*} [error] - error\n\t* @returns {void}\n\t*/\n\tfunction clbk( error ) {\n\t\tif ( error ) {\n\t\t\tdebug( 'Encountered an error: %s', error.message );\n\t\t\treturn done( error );\n\t\t}\n\t\tcount += 1;\n\t\tdebug( 'Processed %d of %d functions.', count, len );\n\t\tif ( idx < maxIndex ) {\n\t\t\treturn next();\n\t\t}\n\t\tif ( count === len ) {\n\t\t\tdebug( 'Finished processing the functions.' );\n\t\t\treturn done( null, out );\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default limit;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isFunctionArray from '@stdlib/assert-is-function-array';\nimport isFunction from '@stdlib/assert-is-function';\nimport format from '@stdlib/error-tools-fmtprodmsg';\nimport PINF from '@stdlib/constants-float64-pinf';\nimport validate from './validate.js';\nimport limit from './limit.js';\n\n\n// MAIN //\n\n/**\n* Returns a function to execute a set of functions in parallel.\n*\n* @param {FunctionArray} fcns - array of functions\n* @param {Options} [options] - function options\n* @param {*} [options.thisArg] - execution context\n* @param {PositiveInteger} [options.limit] - maximum number of pending invocations at any one time\n* @throws {TypeError} first argument must be an array of functions\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {Function} parallel function\n*\n* @example\n* function a( resolve ) {\n*     setTimeout( onTimeout, 0 );\n*     function onTimeout() {\n*         resolve( null, 2 );\n*     }\n* }\n*\n* function b( resolve ) {\n*     setTimeout( onTimeout, 0 );\n*     function onTimeout() {\n*         resolve( null, 4 );\n*     }\n* }\n*\n* function done( error, out ) {\n*     if ( error ) {\n*         throw error;\n*     }\n*     console.log( out );\n*     // => [ 2, 4 ]\n* }\n*\n* var fcns = [ a, b ];\n*\n* var run = parallel.factory( fcns );\n*\n* run( done );\n*/\nfunction factory( fcns, options ) {\n\tvar opts;\n\tvar err;\n\n\tif ( !isFunctionArray( fcns ) ) {\n\t\tthrow new TypeError( format( 'nullAl', fcns ) );\n\t}\n\topts = {\n\t\t'limit': PINF\n\t};\n\tif ( arguments.length > 1 ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\treturn parallel;\n\n\t/**\n\t* Executes a set of functions in parallel and returns an array of results.\n\t*\n\t* @private\n\t* @param {Callback} done - function to invoke upon completion\n\t* @throws {TypeError} must provide a function\n\t* @returns {void}\n\t*/\n\tfunction parallel( done ) {\n\t\tif ( !isFunction( done ) ) {\n\t\t\tthrow new TypeError( format( 'null2b', done ) );\n\t\t}\n\t\treturn limit( fcns, opts, clbk );\n\n\t\t/**\n\t\t* Callback invoked upon completion.\n\t\t*\n\t\t* @private\n\t\t* @param {*} [error] - error\n\t\t* @param {Array} [out] - output array\n\t\t* @returns {void}\n\t\t*/\n\t\tfunction clbk( error, out ) {\n\t\t\tif ( error ) {\n\t\t\t\treturn done( error );\n\t\t\t}\n\t\t\tdone( null, out );\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isObject from '@stdlib/assert-is-plain-object';\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport { isPrimitive as isPositiveInteger } from '@stdlib/assert-is-positive-integer';\nimport format from '@stdlib/error-tools-fmtprodmsg';\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {*} [options.thisArg] - execution context\n* @param {PositiveInteger} [options.limit] - maximum number of pending invocations at any one time\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'thisArg': {},\n*     'limit': 10\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'null2V', options ) );\n\t}\n\tif ( hasOwnProp( options, 'thisArg' ) ) {\n\t\topts.thisArg = options.thisArg;\n\t}\n\tif ( hasOwnProp( options, 'limit' ) ) {\n\t\topts.limit = options.limit;\n\t\tif ( !isPositiveInteger( opts.limit ) ) {\n\t\t\treturn new TypeError( format( 'null3P', 'limit', opts.limit ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport factory from './factory.js';\n\n\n// MAIN //\n\n/**\n* Executes a set of functions in parallel.\n*\n* @param {FunctionArray} fcns - array of functions\n* @param {Options} [options] - function options\n* @param {*} [options.thisArg] - execution context\n* @param {PositiveInteger} [options.limit] - maximum number of pending invocations at any one time\n* @param {Callback} done - function to invoke upon completion\n* @throws {TypeError} first argument must be an array of functions\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {TypeError} callback argument must be a function\n* @returns {void}\n*\n* @example\n* import parallel from '@stdlib/utils-async-parallel';\n*\n* function foo( resolve ) {\n*     setTimeout( onTimeout, 300 );\n*     function onTimeout() {\n*         resolve( null, 'one' );\n*     }\n* }\n*\n* function bar( resolve ) {\n*     setTimeout( onTimeout, 100 );\n*     function onTimeout() {\n*         resolve( null, 'two' );\n*     }\n* }\n*\n* function done( error, results ) {\n*     if ( error ) {\n*         throw error;\n*     }\n*     console.log( results );\n*     // => [ 'one', 'two' ]\n* }\n*\n* var fcns = [ foo, bar ];\n*\n* parallel( fcns, done );\n*/\nfunction parallel( fcns, options, done ) {\n\tif ( arguments.length < 3 ) {\n\t\treturn factory( fcns )( options );\n\t}\n\tfactory( fcns, options )( done );\n}\n\n\n// EXPORTS //\n\nexport default parallel;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Execute a set of functions in parallel.\n*\n* @module @stdlib/utils-async-parallel\n*\n* @example\n* import parallel from '@stdlib/utils-async-parallel';\n*\n* function foo( resolve ) {\n*     setTimeout( onTimeout, 300 );\n*     function onTimeout() {\n*         resolve( null, 'one' );\n*     }\n* }\n*\n* function bar( resolve ) {\n*     setTimeout( onTimeout, 100 );\n*     function onTimeout() {\n*         resolve( null, 'two' );\n*     }\n* }\n*\n* function done( error, results ) {\n*     if ( error ) {\n*         throw error;\n*     }\n*     console.log( results );\n*     // => [ 'one', 'two' ]\n* }\n*\n* var fcns = [ foo, bar ];\n*\n* parallel( fcns, done );\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default main;\n"],"names":["debug","logger","factory","fcns","options","opts","err","isFunctionArray","TypeError","format","limit","PINF","arguments","length","isObject","hasOwnProp","thisArg","isPositiveInteger","validate","done","isFunction","maxIndex","count","flg","lim","len","idx","out","i","Array","next","call","error","results","clbk","message","parallel","setReadOnly","main"],"mappings":";;uvCA2BIA,uDAAQC,CAAQ,wBC8CpB,SAASC,EAASC,EAAMC,GACvB,IAAIC,EACAC,EAEJ,IAAMC,EAAiBJ,GACtB,MAAM,IAAIK,UAAWC,EAAQ,SAAUN,IAKxC,GAHAE,EAAO,CACNK,MAASC,GAELC,UAAUC,OAAS,IACvBP,ECjCF,SAAmBD,EAAMD,GACxB,OAAMU,EAAUV,IAGXW,EAAYX,EAAS,aACzBC,EAAKW,QAAUZ,EAAQY,SAEnBD,EAAYX,EAAS,WACzBC,EAAKK,MAAQN,EAAQM,OACfO,EAAmBZ,EAAKK,QACtB,IAAIF,UAAWC,EAAQ,SAAU,QAASJ,EAAKK,QAGjD,MAXC,IAAIF,UAAWC,EAAQ,SAAUL,GAY1C,CDmBQc,CAAUb,EAAMD,GACjBE,GACJ,MAAMA,EAGR,OAUA,SAAmBa,GAClB,IAAMC,EAAYD,GACjB,MAAM,IAAIX,UAAWC,EAAQ,SAAUU,IAExC,OD5DF,SAAgBhB,EAAME,EAAMc,GAC3B,IAAIE,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAgBJ,IAdAH,EAAMtB,EAAKU,OACXb,EAAO,0BAA2ByB,GAElCE,EAAM,IAAIE,MAAOJ,GAEhBD,EADIC,EAAMpB,EAAKK,MACTe,EAEApB,EAAKK,MAEZV,EAAO,wBAAyBwB,GAEhCH,EAAWI,EAAM,EACjBH,EAAQ,EACRI,GAAO,EACDE,EAAI,EAAGA,EAAIJ,EAAKI,IAEhBF,EAAML,GACVS,IAQF,SAASA,IACR,IAAIF,EAKJA,EAHAF,GAAO,EAKPvB,EAAMuB,GAAMK,KAAM1B,EAAKW,SAUvB,SAAkBgB,EAAOC,GACxB,IAAKV,EAIL,OAAKS,GACJT,GAAM,EACCW,EAAMF,KAEdL,EAAKC,GAAMK,OACXC,IACA,GACD,CASD,SAASA,EAAMF,GACd,OAAKA,GACJhC,EAAO,2BAA4BgC,EAAMG,SAClChB,EAAMa,KAGdhC,EAAO,gCADPsB,GAAS,EACsCG,GAC1CC,EAAML,EACHS,IAEHR,IAAUG,GACdzB,EAAO,sCACAmB,EAAM,KAAMQ,SAFpB,EAIA,CACF,CC7BSjB,CAAOP,EAAME,GAUpB,SAAe2B,EAAOL,GACrB,GAAKK,EACJ,OAAOb,EAAMa,GAEdb,EAAM,KAAMQ,EACZ,GACD,CACF,CElDA,SAASS,EAAUjC,EAAMC,EAASe,GACjC,GAAKP,UAAUC,OAAS,EACvB,OAAOX,EAASC,EAATD,CAAiBE,GAEzBF,EAASC,EAAMC,EAAfF,CAA0BiB,EAC3B,CCXAkB,EAAAC,EAAA,UAAApC"}